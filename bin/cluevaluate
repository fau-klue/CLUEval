#!/usr/bin/env python3

from clueval.evaluation import MetricsForSpansAnonymisation, MetricsForCategoricalSpansAnonymisation
from clueval.data import Convert, Relevel, Join, JoinMultitaskSpans
import pandas as pd
import numpy as np

import argparse


def arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("reference", help="Path to reference file.")
    parser.add_argument("candidate", help="Path to candidate or prediction file.")
    return parser.parse_args()


if __name__=="__main__":
    args = arguments()
    
    # Convert BIO to spans tables
    convert_ref_spans = Convert(args.reference)
    convert_cand_spans = Convert(args.candidate)

    reference_df = convert_ref_spans()
    anon_df = convert_cand_spans(gold=False)
    entity_df = convert_cand_spans(gold=False, tag_column_id=2)
    risk_df = convert_cand_spans(gold=False, tag_column_id=3)

    # Relevel
    reference_df = Relevel(reference_df)(cat=True, prefix="gold")
    anon_df = Relevel(anon_df)(prefix="anon")
    entity_df = Relevel(entity_df)(cat=True, prefix="cat")
    risk_df = Relevel(risk_df)(prefix="risk")

    # Join span tables
    reference_anon_df = Join(reference_df, anon_df)(on=["start", "end"])
    reference_entity_df = Join(reference_df, entity_df)(on=["start", "end"])
    reference_risk_df = Join(reference_df, risk_df)(on=["start", "end"])

    # Multitask Join
    all_df = JoinMultitaskSpans(anon_df, entity_df, risk_df)(on=["start", "end"])
    reference_all = Join(reference_df, all_df)(on=["start", "end"])
    reference_high_risk = Join(reference_df.loc[reference_df.risk == "hoch"], all_df)(on=["start", "end"])
    
    spans_evaluation = pd.concat([MetricsForSpansAnonymisation(reference_anon_df)(lenient=True, row_name="Anon"), 
                                      MetricsForSpansAnonymisation(reference_entity_df)(lenient=True, row_name="Entity"),
                                      MetricsForSpansAnonymisation(reference_risk_df)(lenient=True, row_name="Risk"),
                                      MetricsForSpansAnonymisation(reference_all)(lenient=True, row_name="All"),
                                      MetricsForSpansAnonymisation(reference_high_risk)(lenient=True, row_name="High risk")
                                    ])[["P", "R", "F1", "FN", "FP", "support"]].reset_index().rename(columns={"index": "Span", "support": "Support"})
    print(f"Spans evaluation:\n{spans_evaluation}\n")
    
    entity_spans_evaluation = MetricsForCategoricalSpansAnonymisation(reference_entity_df, column="cat")()[["P", "R", "F1", "support"]].reset_index().rename(columns={"index": "Entity", "support": "Support"})
    print(f"Entity spans:\n{entity_spans_evaluation}\n")

    risk_spans_evaluation = MetricsForCategoricalSpansAnonymisation(reference_risk_df, column="risk")()[["P", "R", "F1", "support"]].reset_index().rename(columns={"index": "Risk", "support": "Support"})
    print(f"Risk spans:\n{risk_spans_evaluation}")
